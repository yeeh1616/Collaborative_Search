var _jsxFileName = "/Users/felipemoraes/Developer/react-team-chat-window/src/components/Messages/index.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import TextMessage from './TextMessage';
import EmojiMessage from './EmojiMessage';
import FileMessage from './FileMessage';
import Identicon from 'identicon.js';
import md5 from 'md5';

var Message = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Message, _Component);

  var _super = _createSuper(Message);

  function Message() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Message.prototype;

  _proto._renderMessageOfType = function _renderMessageOfType(type) {
    switch (type) {
      case 'text':
        return /*#__PURE__*/React.createElement(TextMessage, _extends({}, this.props.message, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 14,
            columnNumber: 14
          }
        }));

      case 'emoji':
        return /*#__PURE__*/React.createElement(EmojiMessage, _extends({}, this.props.message, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 16,
            columnNumber: 14
          }
        }));

      case 'file':
        return /*#__PURE__*/React.createElement(FileMessage, _extends({}, this.props.message, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 18,
            columnNumber: 14
          }
        }));

      default:
        console.error("Attempting to load message with unsupported file type '" + type + "'");
    }
  };

  _proto.render = function render() {
    var options = {
      size: 40
    };
    var data = new Identicon(md5(this.props.message.sender), options).toString();
    var chatIconUrl = "data:image/png;base64," + data;
    var contentClassList = ['sc-message--content', this.props.message.author === 'me' ? 'sent' : 'received'];
    var sentClass = /*#__PURE__*/React.createElement("div", {
      className: contentClassList.join(' '),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 37,
        columnNumber: 7
      }
    }, this._renderMessageOfType(this.props.message.type), /*#__PURE__*/React.createElement("div", {
      className: "sc-message--avatar",
      style: {
        backgroundImage: "url(" + chatIconUrl + ")"
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 7
      }
    }));
    var receiveClass = /*#__PURE__*/React.createElement("div", {
      className: contentClassList.join(' '),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 46,
        columnNumber: 7
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "sc-message--avatar",
      style: {
        backgroundImage: "url(" + chatIconUrl + ")"
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 47,
        columnNumber: 7
      }
    }), this._renderMessageOfType(this.props.message.type));
    return /*#__PURE__*/React.createElement("div", {
      className: "sc-message",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 56,
        columnNumber: 7
      }
    }, this.props.message.author === 'me' ? sentClass : receiveClass);
  };

  return Message;
}(Component);

export default Message;